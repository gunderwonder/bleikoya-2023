/*! @nrk/core-scroll v4.4.0 - Copyright (c) 2017-2022 NRK */
'use strict';

var fs = require('fs');
var path = require('path');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var fs__default = /*#__PURE__*/_interopDefaultLegacy(fs);
var path__default = /*#__PURE__*/_interopDefaultLegacy(path);

function _regeneratorRuntime() {
  /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */

  _regeneratorRuntime = function () {
    return exports;
  };

  var exports = {},
      Op = Object.prototype,
      hasOwn = Op.hasOwnProperty,
      $Symbol = "function" == typeof Symbol ? Symbol : {},
      iteratorSymbol = $Symbol.iterator || "@@iterator",
      asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator",
      toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    return Object.defineProperty(obj, key, {
      value: value,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }), obj[key];
  }

  try {
    define({}, "");
  } catch (err) {
    define = function (obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,
        generator = Object.create(protoGenerator.prototype),
        context = new Context(tryLocsList || []);
    return generator._invoke = function (innerFn, self, context) {
      var state = "suspendedStart";
      return function (method, arg) {
        if ("executing" === state) throw new Error("Generator is already running");

        if ("completed" === state) {
          if ("throw" === method) throw arg;
          return doneResult();
        }

        for (context.method = method, context.arg = arg;;) {
          var delegate = context.delegate;

          if (delegate) {
            var delegateResult = maybeInvokeDelegate(delegate, context);

            if (delegateResult) {
              if (delegateResult === ContinueSentinel) continue;
              return delegateResult;
            }
          }

          if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) {
            if ("suspendedStart" === state) throw state = "completed", context.arg;
            context.dispatchException(context.arg);
          } else "return" === context.method && context.abrupt("return", context.arg);
          state = "executing";
          var record = tryCatch(innerFn, self, context);

          if ("normal" === record.type) {
            if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;
            return {
              value: record.arg,
              done: context.done
            };
          }

          "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
        }
      };
    }(innerFn, self, context), generator;
  }

  function tryCatch(fn, obj, arg) {
    try {
      return {
        type: "normal",
        arg: fn.call(obj, arg)
      };
    } catch (err) {
      return {
        type: "throw",
        arg: err
      };
    }
  }

  exports.wrap = wrap;
  var ContinueSentinel = {};

  function Generator() {}

  function GeneratorFunction() {}

  function GeneratorFunctionPrototype() {}

  var IteratorPrototype = {};
  define(IteratorPrototype, iteratorSymbol, function () {
    return this;
  });
  var getProto = Object.getPrototypeOf,
      NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);

  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function (method) {
      define(prototype, method, function (arg) {
        return this._invoke(method, arg);
      });
    });
  }

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);

      if ("throw" !== record.type) {
        var result = record.arg,
            value = result.value;
        return value && "object" == typeof value && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) {
          invoke("next", value, resolve, reject);
        }, function (err) {
          invoke("throw", err, resolve, reject);
        }) : PromiseImpl.resolve(value).then(function (unwrapped) {
          result.value = unwrapped, resolve(result);
        }, function (error) {
          return invoke("throw", error, resolve, reject);
        });
      }

      reject(record.arg);
    }

    var previousPromise;

    this._invoke = function (method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function (resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
    };
  }

  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];

    if (undefined === method) {
      if (context.delegate = null, "throw" === context.method) {
        if (delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel;
        context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);
    if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
    var info = record.arg;
    return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
  }

  function pushTryEntry(locs) {
    var entry = {
      tryLoc: locs[0]
    };
    1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal", delete record.arg, entry.completion = record;
  }

  function Context(tryLocsList) {
    this.tryEntries = [{
      tryLoc: "root"
    }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);
  }

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) return iteratorMethod.call(iterable);
      if ("function" == typeof iterable.next) return iterable;

      if (!isNaN(iterable.length)) {
        var i = -1,
            next = function next() {
          for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;

          return next.value = undefined, next.done = !0, next;
        };

        return next.next = next;
      }
    }

    return {
      next: doneResult
    };
  }

  function doneResult() {
    return {
      value: undefined,
      done: !0
    };
  }

  return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) {
    var ctor = "function" == typeof genFun && genFun.constructor;
    return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
  }, exports.mark = function (genFun) {
    return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
  }, exports.awrap = function (arg) {
    return {
      __await: arg
    };
  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
    return this;
  }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    void 0 === PromiseImpl && (PromiseImpl = Promise);
    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
    return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
      return result.done ? result.value : iter.next();
    });
  }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () {
    return this;
  }), define(Gp, "toString", function () {
    return "[object Generator]";
  }), exports.keys = function (object) {
    var keys = [];

    for (var key in object) keys.push(key);

    return keys.reverse(), function next() {
      for (; keys.length;) {
        var key = keys.pop();
        if (key in object) return next.value = key, next.done = !1, next;
      }

      return next.done = !0, next;
    };
  }, exports.values = values, Context.prototype = {
    constructor: Context,
    reset: function (skipTempReset) {
      if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);
    },
    stop: function () {
      this.done = !0;
      var rootRecord = this.tryEntries[0].completion;
      if ("throw" === rootRecord.type) throw rootRecord.arg;
      return this.rval;
    },
    dispatchException: function (exception) {
      if (this.done) throw exception;
      var context = this;

      function handle(loc, caught) {
        return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i],
            record = entry.completion;
        if ("root" === entry.tryLoc) return handle("end");

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc"),
              hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
          } else {
            if (!hasFinally) throw new Error("try statement without catch or finally");
            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
          }
        }
      }
    },
    abrupt: function (type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];

        if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
      var record = finallyEntry ? finallyEntry.completion : {};
      return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
    },
    complete: function (record, afterLoc) {
      if ("throw" === record.type) throw record.arg;
      return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
    },
    finish: function (finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
      }
    },
    catch: function (tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];

        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;

          if ("throw" === record.type) {
            var thrown = record.arg;
            resetTryEntry(entry);
          }

          return thrown;
        }
      }

      throw new Error("illegal catch attempt");
    },
    delegateYield: function (iterable, resultName, nextLoc) {
      return this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      }, "next" === this.method && (this.arg = undefined), ContinueSentinel;
    }
  }, exports;
}

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}

var IS_BROWSER = typeof window !== 'undefined';
var HAS_NAVIGATOR = IS_BROWSER && typeof window.navigator !== 'undefined';
HAS_NAVIGATOR && /(android)/i.test(navigator.userAgent); // Bad, but needed

HAS_NAVIGATOR && /iPad|iPhone|iPod/.test(String(navigator.platform));
// Mock HTMLElement for Node

if (!IS_BROWSER && !global.HTMLElement) {
  global.HTMLElement = /*#__PURE__*/function () {
    function _class() {
      _classCallCheck(this, _class);
    }

    return _createClass(_class);
  }();
}
/**
* closest
* @param {Element} element Element to traverse up from
* @param {String} selector A selector to search for matching parents or element itself
* @return {Element|null}  Element which is the closest ancestor matching selector
*/

(function () {
  var proto = typeof window === 'undefined' ? {} : window.Element.prototype;
  var match = proto.matches || proto.msMatchesSelector || proto.webkitMatchesSelector;
  return proto.closest ? function (el, css) {
    return el.closest(css);
  } : function (el, css) {
    // IE jumps to shadow SVG DOM on clicking an SVG defined by <use>.
    // If so, jump back to <use> element and traverse real DOM
    if (el.correspondingUseElement) el = el.correspondingUseElement;

    for (; el; el = el.parentElement) {
      if (match.call(el, css)) return el;
    }

    return null;
  };
})();

(function () {
  var has = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

  try {
    window.addEventListener('test', null, {
      get passive() {
        has = {
          passive: true
        };
      }

    });
  } catch (e) {}

  return has;
})(); // https://css-tricks.com/introduction-reduced-motion-media-query/


IS_BROWSER && window.matchMedia && window.matchMedia('(prefers-reduced-motion)').matches;

var coreScroll = fs__default["default"].readFileSync(path__default["default"].resolve(__dirname, 'core-scroll.min.js'), 'utf-8');
var customElements = fs__default["default"].readFileSync(require.resolve('@webcomponents/custom-elements'), 'utf-8');

var addOverflowStyling = function addOverflowStyling() {
  var css = "\n  .content-container {\n    height: 200px;\n    width: 400px;\n    white-space: nowrap;\n    overflow: hidden;\n    border: 1px solid;\n  }\n  .content-item {\n    box-sizing: border-box;\n    white-space: normal;\n    display: inline-block;\n    vertical-align: top;\n    width: 30%;\n    height: 90px;\n    padding: 10px;\n    border: 1px solid;\n    margin: 10px;\n  }\n  ";
  var style = document.createElement('style');
  document.head.appendChild(style);
  style.appendChild(document.createTextNode(css));
};

describe('core-scroll', function () {
  beforeEach( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return browser.refresh();

          case 2:
            _context.next = 4;
            return browser.executeScript(customElements);

          case 4:
            _context.next = 6;
            return browser.executeScript(coreScroll);

          case 6:
            _context.next = 8;
            return browser.executeScript(addOverflowStyling);

          case 8:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  })));
  describe('Initialization', function () {
    it('sets overflow: scroll', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
      return _regeneratorRuntime().wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return browser.executeScript(function () {
                document.body.innerHTML = "\n        <button data-for=\"scroller\" value=\"down\">Down</button>\n        <core-scroll id=\"scroller\">\n          <div>This is overflowing content</div>\n          <div>This is overflowing content</div>\n          <div>This is overflowing content</div>\n        </core-scroll>\n      ";
              });

            case 2:
              _context2.next = 4;
              return expect($('core-scroll').getCssValue('overflow')).toEqual('scroll');

            case 4:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    })));
    it('has getters for scroll-distances', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
      return _regeneratorRuntime().wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return browser.executeScript(function () {
                document.body.innerHTML = "\n        <button data-for=\"scroller\" value=\"down\">Down</button>\n        <div class=\"content-container\">\n          <core-scroll id=\"scroller\" friction=\"0.001\">\n            <div class=\"content-item\">This is overflowing content</div>\n            <div class=\"content-item\">This is overflowing content</div>\n            <div class=\"content-item\">This is overflowing content</div>\n            <div class=\"content-item\" id=\"fourth\">This is overflowing content</div>\n            <br>\n            <div class=\"content-item\">This is overflowing content</div>\n            <div class=\"content-item\">This is overflowing content</div>\n            <div class=\"content-item\">This is overflowing content</div>\n            <div class=\"content-item\">This is overflowing content</div>\n            <br>\n            <div class=\"content-item\">This is overflowing content</div>\n            <div class=\"content-item\">This is overflowing content</div>\n            <div class=\"content-item\">This is overflowing content</div>\n            <div class=\"content-item\">This is overflowing content</div>\n          </core-scroll>\n        </div>\n      ";
              });

            case 2:
              _context3.next = 4;
              return expect(browser.executeScript(function () {
                return document.getElementById('scroller').scrollLeft;
              })).toEqual(0);

            case 4:
              _context3.next = 6;
              return expect(browser.executeScript(function () {
                return document.getElementById('scroller').scrollRight;
              })).toEqual(172);

            case 6:
              _context3.next = 8;
              return expect(browser.executeScript(function () {
                return document.getElementById('scroller').scrollTop;
              })).toEqual(0);

            case 8:
              _context3.next = 10;
              return expect(browser.executeScript(function () {
                return document.getElementById('scroller').scrollBottom;
              })).toEqual(130);

            case 10:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    })));
    it('has getter for items in scroller', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {
      return _regeneratorRuntime().wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return browser.executeScript(function () {
                document.body.innerHTML = "\n        <button data-for=\"scroller\" value=\"down\">Down</button>\n        <div class=\"content-container\">\n          <core-scroll id=\"scroller\" items=\"div\">\n            <div class=\"content-item\">This is overflowing content</div>\n            <div class=\"content-item\">This is overflowing content</div>\n            <div class=\"content-item\">This is overflowing content</div>\n            <div class=\"content-item\">This is overflowing content</div>\n            <br>\n            <div class=\"content-item\">This is overflowing content</div>\n          </core-scroll>\n        </div>\n      ";
              });

            case 2:
              _context4.next = 4;
              return expect(browser.executeScript(function () {
                return document.getElementById('scroller').items.length;
              })).toEqual(5);

            case 4:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    })));
    it('accepts list of custom elements to items-attribute', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {
      return _regeneratorRuntime().wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              _context5.next = 2;
              return browser.executeScript(function () {
                document.body.innerHTML = "\n        <button data-for=\"scroller\" value=\"down\">Down</button>\n        <core-scroll id=\"scroller\" items=\"div,span\">\n          <div>This is overflowing content</div>\n          <span>This is overflowing content</span>\n          <div>This is overflowing content</div>\n        </core-scroll>\n      ";
              });

            case 2:
              _context5.next = 4;
              return expect(browser.executeScript(function () {
                return document.getElementById('scroller').items.length;
              })).toEqual(3);

            case 4:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5);
    })));
    it('accepts float number to friction-attribute', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {
      return _regeneratorRuntime().wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              _context6.next = 2;
              return browser.executeScript(function () {
                document.body.innerHTML = "\n        <button data-for=\"scroller\" value=\"down\">Down</button>\n        <core-scroll id=\"scroller\" friction=\"0.1\">\n          <div>This is overflowing content</div>\n          <div>This is overflowing content</div>\n          <div>This is overflowing content</div>\n        </core-scroll>\n      ";
              });

            case 2:
              _context6.next = 4;
              return expect(browser.executeScript(function () {
                return document.getElementById('scroller').friction;
              })).toEqual(0.1);

            case 4:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6);
    })));
    it('dispatches "scroll.change" onConnected and when children are added/removed', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {
      return _regeneratorRuntime().wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              _context7.next = 2;
              return browser.executeScript(function () {
                window.scrollEvents = [];
                document.body.innerHTML = '<core-scroll id="scroller"></core-scroll>';
                document.addEventListener('scroll.change', function (event) {
                  return window.scrollEvents.push(event);
                });
              });

            case 2:
              _context7.next = 4;
              return expect(browser.executeScript(function () {
                return window.scrollEvents.length;
              })).toEqual(1);

            case 4:
              _context7.next = 6;
              return browser.executeScript(function () {
                document.getElementById('scroller').insertAdjacentHTML('beforeend', "\n          <div>This is overflowing content</div>\n          <div>This is overflowing content</div>\n          <div>This is overflowing content</div>\n        ");
              });

            case 6:
              _context7.next = 8;
              return expect(browser.executeScript(function () {
                return window.scrollEvents.length;
              })).toEqual(2);

            case 8:
              _context7.next = 10;
              return browser.executeScript(function () {
                return document.getElementById('scroller').children[0].remove();
              });

            case 10:
              _context7.next = 12;
              return expect(browser.executeScript(function () {
                return window.scrollEvents.length;
              })).toEqual(3);

            case 12:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7);
    })));
  });
  describe('scroll-function', function () {
    it('works with a cardinal direction', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {
      return _regeneratorRuntime().wrap(function _callee9$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              _context9.next = 2;
              return browser.executeScript(function () {
                document.body.innerHTML = "\n        <button data-for=\"scroller\" value=\"down\">Down</button>\n        <div class=\"content-container\">\n          <core-scroll id=\"scroller\" friction=\"0.001\">\n            <div class=\"content-item\">This is overflowing content</div>\n            <div class=\"content-item\">This is overflowing content</div>\n            <div class=\"content-item\">This is overflowing content</div>\n            <div class=\"content-item\" id=\"fourth\">This is overflowing content</div>\n            <br>\n            <div class=\"content-item\">This is overflowing content</div>\n            <div class=\"content-item\">This is overflowing content</div>\n            <div class=\"content-item\">This is overflowing content</div>\n            <div class=\"content-item\">This is overflowing content</div>\n            <br>\n            <div class=\"content-item\">This is overflowing content</div>\n            <div class=\"content-item\">This is overflowing content</div>\n            <div class=\"content-item\">This is overflowing content</div>\n            <div class=\"content-item\">This is overflowing content</div>\n          </core-scroll>\n        </div>\n      ";
              });

            case 2:
              _context9.next = 4;
              return expect(browser.executeScript(function () {
                return document.getElementById('scroller').scrollRight;
              })).toEqual(172);

            case 4:
              _context9.next = 6;
              return expect(browser.executeScript(function () {
                return document.getElementById('scroller').scrollBottom;
              })).toEqual(130);

            case 6:
              _context9.next = 8;
              return browser.executeScript( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {
                var coreScroll;
                return _regeneratorRuntime().wrap(function _callee8$(_context8) {
                  while (1) {
                    switch (_context8.prev = _context8.next) {
                      case 0:
                        /**
                         * @type {CoreScroll}
                         */
                        coreScroll = document.getElementById('scroller');
                        _context8.next = 3;
                        return coreScroll.scroll('right');

                      case 3:
                      case "end":
                        return _context8.stop();
                    }
                  }
                }, _callee8);
              })));

            case 8:
              _context9.next = 10;
              return expect(browser.executeScript(function () {
                return document.getElementById('scroller').scrollLeft;
              })).toEqual(172);

            case 10:
              _context9.next = 12;
              return expect(browser.executeScript(function () {
                return document.getElementById('scroller').scrollRight;
              })).toEqual(0);

            case 12:
              _context9.next = 14;
              return expect(browser.executeScript(function () {
                return document.getElementById('scroller').scrollBottom;
              })).toEqual(130);

            case 14:
            case "end":
              return _context9.stop();
          }
        }
      }, _callee9);
    })));
    it('works with x,y coordinates', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11() {
      return _regeneratorRuntime().wrap(function _callee11$(_context11) {
        while (1) {
          switch (_context11.prev = _context11.next) {
            case 0:
              _context11.next = 2;
              return browser.executeScript(function () {
                document.body.innerHTML = "\n        <button data-for=\"scroller\" value=\"down\">Down</button>\n        <div class=\"content-container\">\n          <core-scroll id=\"scroller\" friction=\"0.001\">\n            <div class=\"content-item\">This is overflowing content</div>\n            <div class=\"content-item\">This is overflowing content</div>\n            <div class=\"content-item\">This is overflowing content</div>\n            <div class=\"content-item\" id=\"fourth\">This is overflowing content</div>\n            <br>\n            <div class=\"content-item\">This is overflowing content</div>\n            <div class=\"content-item\">This is overflowing content</div>\n            <div class=\"content-item\">This is overflowing content</div>\n            <div class=\"content-item\">This is overflowing content</div>\n            <br>\n            <div class=\"content-item\">This is overflowing content</div>\n            <div class=\"content-item\">This is overflowing content</div>\n            <div class=\"content-item\">This is overflowing content</div>\n            <div class=\"content-item\">This is overflowing content</div>\n          </core-scroll>\n        </div>\n      ";
              });

            case 2:
              _context11.next = 4;
              return expect(browser.executeScript(function () {
                return document.getElementById('scroller').scrollRight;
              })).toEqual(172);

            case 4:
              _context11.next = 6;
              return expect(browser.executeScript(function () {
                return document.getElementById('scroller').scrollBottom;
              })).toEqual(130);

            case 6:
              _context11.next = 8;
              return browser.executeScript( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {
                var coreScroll;
                return _regeneratorRuntime().wrap(function _callee10$(_context10) {
                  while (1) {
                    switch (_context10.prev = _context10.next) {
                      case 0:
                        /**
                         * @type {CoreScroll}
                         */
                        coreScroll = document.getElementById('scroller');
                        _context10.next = 3;
                        return coreScroll.scroll({
                          x: 2,
                          y: 30
                        });

                      case 3:
                      case "end":
                        return _context10.stop();
                    }
                  }
                }, _callee10);
              })));

            case 8:
              _context11.next = 10;
              return expect(browser.executeScript(function () {
                return document.getElementById('scroller').scrollLeft;
              })).toEqual(2);

            case 10:
              _context11.next = 12;
              return expect(browser.executeScript(function () {
                return document.getElementById('scroller').scrollRight;
              })).toEqual(170);

            case 12:
              _context11.next = 14;
              return expect(browser.executeScript(function () {
                return document.getElementById('scroller').scrollTop;
              })).toEqual(30);

            case 14:
              _context11.next = 16;
              return expect(browser.executeScript(function () {
                return document.getElementById('scroller').scrollBottom;
              })).toEqual(100);

            case 16:
            case "end":
              return _context11.stop();
          }
        }
      }, _callee11);
    })));
    it('works with an element', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13() {
      return _regeneratorRuntime().wrap(function _callee13$(_context13) {
        while (1) {
          switch (_context13.prev = _context13.next) {
            case 0:
              _context13.next = 2;
              return browser.executeScript(function () {
                document.body.innerHTML = "\n        <button data-for=\"scroller\" value=\"down\">Down</button>\n        <div class=\"content-container\">\n          <core-scroll id=\"scroller\" friction=\"0.001\">\n            <div class=\"content-item\">This is overflowing content</div>\n            <div class=\"content-item\">This is overflowing content</div>\n            <div class=\"content-item\">This is overflowing content</div>\n            <div class=\"content-item\">This is overflowing content</div>\n            <br>\n            <div class=\"content-item\">This is overflowing content</div>\n            <div class=\"content-item\">This is overflowing content</div>\n            <div class=\"content-item\">This is overflowing content</div>\n            <div class=\"content-item\" id=\"fourth\">This is overflowing content</div>\n            <br>\n            <div class=\"content-item\">This is overflowing content</div>\n            <div class=\"content-item\">This is overflowing content</div>\n            <div class=\"content-item\">This is overflowing content</div>\n            <div class=\"content-item\">This is overflowing content</div>\n          </core-scroll>\n        </div>\n      ";
              });

            case 2:
              _context13.next = 4;
              return expect(browser.executeScript(function () {
                return document.getElementById('scroller').scrollRight;
              })).toEqual(172);

            case 4:
              _context13.next = 6;
              return expect(browser.executeScript(function () {
                return document.getElementById('scroller').scrollBottom;
              })).toEqual(130);

            case 6:
              _context13.next = 8;
              return browser.executeScript( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12() {
                var coreScroll;
                return _regeneratorRuntime().wrap(function _callee12$(_context12) {
                  while (1) {
                    switch (_context12.prev = _context12.next) {
                      case 0:
                        /**
                         * @type {CoreScroll}
                         */
                        coreScroll = document.getElementById('scroller');
                        _context12.next = 3;
                        return coreScroll.scroll(document.getElementById('fourth'));

                      case 3:
                      case "end":
                        return _context12.stop();
                    }
                  }
                }, _callee12);
              })));

            case 8:
              _context13.next = 10;
              return expect(browser.executeScript(function () {
                return document.getElementById('scroller').scrollLeft;
              })).toEqual(172);

            case 10:
              _context13.next = 12;
              return expect(browser.executeScript(function () {
                return document.getElementById('scroller').scrollRight;
              })).toEqual(0);

            case 12:
              _context13.next = 14;
              return expect(browser.executeScript(function () {
                return document.getElementById('scroller').scrollTop;
              })).toEqual(65);

            case 14:
              _context13.next = 16;
              return expect(browser.executeScript(function () {
                return document.getElementById('scroller').scrollBottom;
              })).toEqual(65);

            case 16:
            case "end":
              return _context13.stop();
          }
        }
      }, _callee13);
    })));
    it('returns a promise when scrolling is complete', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15() {
      return _regeneratorRuntime().wrap(function _callee15$(_context15) {
        while (1) {
          switch (_context15.prev = _context15.next) {
            case 0:
              _context15.next = 2;
              return browser.executeScript(function () {
                document.body.innerHTML = "\n        <button data-for=\"scroller\" value=\"down\">Down</button>\n        <div class=\"content-container\">\n          <core-scroll id=\"scroller\">\n            <div class=\"content-item\">This is overflowing content</div>\n            <br>\n            <div class=\"content-item\">This is overflowing content</div>\n            <br>\n            <div class=\"content-item\" id=\"targetEl\">This is overflowing content</div>\n          </core-scroll>\n        </div>\n      ";
              });

            case 2:
              _context15.next = 4;
              return browser.executeScript( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14() {
                var coreScroll;
                return _regeneratorRuntime().wrap(function _callee14$(_context14) {
                  while (1) {
                    switch (_context14.prev = _context14.next) {
                      case 0:
                        /**
                         * @type {CoreScroll}
                         */
                        coreScroll = document.getElementById('scroller');
                        _context14.next = 3;
                        return coreScroll.scroll(document.getElementById('targetEl'));

                      case 3:
                        window.done = _context14.sent;

                      case 4:
                      case "end":
                        return _context14.stop();
                    }
                  }
                }, _callee14);
              })));

            case 4:
              _context15.next = 6;
              return expect(browser.executeScript(function () {
                return window.done;
              })).toEqual({
                x: 0,
                y: 175
              });

            case 6:
              _context15.t0 = expect;
              _context15.next = 9;
              return browser.wait(function () {
                return browser.executeScript(function () {
                  return window.done;
                });
              });

            case 9:
              _context15.t1 = _context15.sent;
              _context15.next = 12;
              return (0, _context15.t0)(_context15.t1).toEqual({
                x: 0,
                y: 175
              });

            case 12:
            case "end":
              return _context15.stop();
          }
        }
      }, _callee15);
    })));
  });
});
